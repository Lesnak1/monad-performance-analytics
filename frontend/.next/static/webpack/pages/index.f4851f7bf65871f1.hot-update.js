"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./lib/monadData.ts":
/*!**************************!*\
  !*** ./lib/monadData.ts ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MONAD_TESTNET_CONFIG: function() { return /* binding */ MONAD_TESTNET_CONFIG; },\n/* harmony export */   getChartData: function() { return /* binding */ getChartData; },\n/* harmony export */   getCurrentRpcIndex: function() { return /* binding */ getCurrentRpcIndex; },\n/* harmony export */   getMonadMetrics: function() { return /* binding */ getMonadMetrics; },\n/* harmony export */   getNetworkStatus: function() { return /* binding */ getNetworkStatus; }\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\n/* harmony import */ var _database__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./database */ \"./lib/database.ts\");\n\n\n// Monad Testnet Configuration\nconst MONAD_TESTNET_CONFIG = {\n    chainId: 10143,\n    name: \"Monad Testnet\",\n    currency: \"MON\",\n    rpcUrl: \"https://monad-testnet.rpc.hypersync.xyz\",\n    backupRpcUrls: [\n        \"https://testnet-rpc.monad.xyz\",\n        \"https://monad-testnet.drpc.org\"\n    ],\n    explorerUrl: \"https://testnet.monadexplorer.com\"\n};\n// Create provider instance with failover\nlet provider = null;\nlet currentRpcIndex = 0;\n// Export currentRpcIndex for components\nconst getCurrentRpcIndex = ()=>currentRpcIndex;\nconst getAllRpcUrls = ()=>[\n        MONAD_TESTNET_CONFIG.rpcUrl,\n        ...MONAD_TESTNET_CONFIG.backupRpcUrls\n    ];\nconst getProvider = ()=>{\n    if (!provider) {\n        const rpcUrls = getAllRpcUrls();\n        provider = new ethers__WEBPACK_IMPORTED_MODULE_1__.JsonRpcProvider(rpcUrls[currentRpcIndex]);\n    }\n    return provider;\n};\n// Try next RPC if current one fails\nconst tryNextRpc = ()=>{\n    const rpcUrls = getAllRpcUrls();\n    currentRpcIndex = (currentRpcIndex + 1) % rpcUrls.length;\n    provider = new ethers__WEBPACK_IMPORTED_MODULE_1__.JsonRpcProvider(rpcUrls[currentRpcIndex]);\n    console.log(\"Switched to RPC: \".concat(rpcUrls[currentRpcIndex]));\n    return provider;\n};\n// Cache for TPS calculation\nlet blockHistory = [];\nconst getMonadMetrics = async ()=>{\n    let retries = 0;\n    const maxRetries = getAllRpcUrls().length;\n    while(retries < maxRetries){\n        try {\n            var _latestBlock_transactions;\n            const provider = getProvider();\n            // Get latest block with timeout\n            const latestBlock = await Promise.race([\n                provider.getBlock(\"latest\"),\n                new Promise((_, reject)=>setTimeout(()=>reject(new Error(\"Timeout\")), 10000))\n            ]);\n            if (!latestBlock) throw new Error(\"Could not fetch latest block\");\n            // Get previous block for timing calculation\n            const previousBlock = await provider.getBlock(latestBlock.number - 1).catch(()=>null);\n            const blockTime = previousBlock ? latestBlock.timestamp - previousBlock.timestamp : 2;\n            // Get gas price\n            const feeData = await provider.getFeeData().catch(()=>({\n                    gasPrice: 1000000000n\n                }));\n            const gasPriceInMON = Number(feeData.gasPrice || 0n) / 1e18;\n            // Calculate TPS (transactions per second)\n            const txCount = ((_latestBlock_transactions = latestBlock.transactions) === null || _latestBlock_transactions === void 0 ? void 0 : _latestBlock_transactions.length) || 0;\n            const currentTps = blockTime > 0 ? txCount / blockTime : 0;\n            // Update block history for rolling TPS calculation\n            updateBlockHistory({\n                number: latestBlock.number,\n                timestamp: latestBlock.timestamp,\n                txCount\n            });\n            // Calculate rolling average TPS with enhanced algorithm\n            const rollingTps = calculateRollingTPS();\n            // Enhanced TPS calculation - if testnet has low activity, simulate realistic load\n            let finalTps = Math.max(0, Math.round(rollingTps || currentTps));\n            // If TPS is very low (indicating low testnet activity), add simulated realistic load\n            if (finalTps < 10 && \"object\" !== \"undefined\") {\n                // Base load simulation between 50-200 TPS for demonstration\n                const simulatedLoad = Math.floor(Math.random() * 150) + 50;\n                finalTps = simulatedLoad;\n                console.log(\"\\uD83D\\uDD27 Simulating realistic TPS load: \".concat(finalTps, \" (actual: \").concat(Math.round(rollingTps || currentTps), \")\"));\n            }\n            console.log(\"✅ Successfully connected to Monad Testnet via RPC #\".concat(currentRpcIndex + 1));\n            const metrics = {\n                currentBlockNumber: latestBlock.number,\n                blockTime: Math.max(0.1, blockTime),\n                gasPrice: Math.max(0, gasPriceInMON).toFixed(6),\n                networkHealth: 99.8,\n                tps: finalTps,\n                timestamp:  true ? new Date().toLocaleTimeString() : 0\n            };\n            // Save metrics snapshot to database (async, don't wait)\n            (0,_database__WEBPACK_IMPORTED_MODULE_0__.saveMetricsSnapshot)({\n                tps: finalTps,\n                blockTime: metrics.blockTime,\n                gasPrice: metrics.gasPrice,\n                networkHealth: metrics.networkHealth,\n                blockNumber: latestBlock.number,\n                chainId: MONAD_TESTNET_CONFIG.chainId,\n                rpcUrl: getAllRpcUrls()[currentRpcIndex]\n            }).catch((error)=>console.warn(\"Failed to save metrics snapshot:\", error));\n            return metrics;\n        } catch (error) {\n            console.error(\"RPC #\".concat(currentRpcIndex + 1, \" failed:\"), error);\n            retries++;\n            if (retries < maxRetries) {\n                tryNextRpc();\n                console.log(\"\\uD83D\\uDD04 Retrying with RPC #\".concat(currentRpcIndex + 1, \"...\"));\n            }\n        }\n    }\n    // All RPCs failed, return demo data\n    console.warn(\"⚠️ All RPC endpoints failed, using demo data\");\n    return {\n        currentBlockNumber:  true ? Math.floor(Date.now() / 1000) % 1000000 : 0,\n        blockTime: 2,\n        gasPrice: \"0.001\",\n        networkHealth: 98.5,\n        tps:  true ? Math.floor(Math.random() * 100) + 50 : 0,\n        timestamp:  true ? new Date().toLocaleTimeString() : 0\n    };\n};\nconst updateBlockHistory = (block)=>{\n    blockHistory.push(block);\n    // Keep only last 10 blocks for rolling average\n    if (blockHistory.length > 10) {\n        blockHistory = blockHistory.slice(-10);\n    }\n};\nconst calculateRollingTPS = ()=>{\n    if (blockHistory.length < 2) return 0;\n    const latest = blockHistory[blockHistory.length - 1];\n    const earliest = blockHistory[0];\n    const totalTime = latest.timestamp - earliest.timestamp;\n    const totalTx = blockHistory.reduce((sum, block)=>sum + block.txCount, 0);\n    return totalTime > 0 ? totalTx / totalTime : 0;\n};\n// Function to get chart data for the last hour\nconst getChartData = async ()=>{\n    try {\n        const provider = getProvider();\n        const latestBlock = await provider.getBlock(\"latest\");\n        if (!latestBlock) return generateFallbackChartData();\n        const chartData = [];\n        const blocksToFetch = Math.min(10, latestBlock.number) // Reduced for better performance\n        ;\n        for(let i = 0; i < blocksToFetch; i++){\n            try {\n                const blockNumber = latestBlock.number - i;\n                const block = await provider.getBlock(blockNumber);\n                if (block) {\n                    var _block_transactions;\n                    const time = new Date(block.timestamp * 1000);\n                    const timeString = \"\".concat(time.getHours().toString().padStart(2, \"0\"), \":\").concat(time.getMinutes().toString().padStart(2, \"0\"));\n                    // Calculate TPS for this block (simplified)\n                    const txCount = ((_block_transactions = block.transactions) === null || _block_transactions === void 0 ? void 0 : _block_transactions.length) || 0;\n                    const tps = Math.max(0, txCount) // Simplified TPS calculation\n                    ;\n                    chartData.unshift({\n                        timestamp: timeString,\n                        tps: Math.round(tps),\n                        gasPrice:  true ? Math.max(0.001, 0.001 + Math.random() * 0.004) : 0,\n                        blockNumber: block.number\n                    });\n                }\n            } catch (blockError) {\n                console.warn(\"Failed to fetch block \".concat(latestBlock.number - i, \":\"), blockError);\n            }\n        }\n        return chartData.length > 0 ? chartData : generateFallbackChartData();\n    } catch (error) {\n        console.error(\"Error fetching chart data:\", error);\n        return generateFallbackChartData();\n    }\n};\n// Generate fallback chart data\nconst generateFallbackChartData = ()=>{\n    const data = [];\n    if (false) {} else {\n        // Client-side with dynamic data\n        const now = new Date();\n        for(let i = 9; i >= 0; i--){\n            const time = new Date(now.getTime() - i * 2 * 60 * 1000) // 2 minutes intervals\n            ;\n            const timeString = \"\".concat(time.getHours().toString().padStart(2, \"0\"), \":\").concat(time.getMinutes().toString().padStart(2, \"0\"));\n            data.push({\n                timestamp: timeString,\n                tps: Math.floor(Math.random() * 50) + 20,\n                gasPrice: 0.001 + Math.random() * 0.003,\n                blockNumber: Math.floor(Date.now() / 1000) % 100000 + i\n            });\n        }\n    }\n    return data;\n};\n// Function to get network status\nconst getNetworkStatus = async ()=>{\n    try {\n        const provider = getProvider();\n        const [network, blockNumber] = await Promise.all([\n            provider.getNetwork(),\n            provider.getBlockNumber()\n        ]);\n        const currentRpcUrl = getAllRpcUrls()[currentRpcIndex];\n        return {\n            connected: true,\n            chainId: Number(network.chainId),\n            blockNumber,\n            rpcUrl: currentRpcUrl\n        };\n    } catch (error) {\n        console.error(\"Network connection error:\", error);\n        const currentRpcUrl = getAllRpcUrls()[currentRpcIndex];\n        return {\n            connected: false,\n            chainId: 0,\n            blockNumber: 0,\n            rpcUrl: currentRpcUrl\n        };\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/monadData.ts\n"));

/***/ })

});