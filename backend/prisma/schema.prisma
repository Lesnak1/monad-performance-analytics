// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Network Metrics Table
model Metrics {
  id               String   @id @default(cuid())
  blockNumber      Int
  gasPrice         String
  tps              Float
  blockTime        Float
  networkHealth    Float
  totalTransactions Int
  timestamp        DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("metrics")
  @@index([timestamp])
  @@index([blockNumber])
}

// Hourly Aggregated Metrics
model HourlyAggregates {
  id               String   @id @default(cuid())
  timestamp        DateTime @unique
  blockNumber      Int
  gasPrice         String
  tps              Float
  blockTime        Float
  networkHealth    Float
  totalTransactions Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("hourly_aggregates")
  @@index([timestamp])
}

// Daily Aggregated Metrics
model DailyAggregates {
  id               String   @id @default(cuid())
  timestamp        DateTime @unique
  blockNumber      Int
  gasPrice         String
  tps              Float
  blockTime        Float
  networkHealth    Float
  totalTransactions Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("daily_aggregates")
  @@index([timestamp])
}

// Transactions Table
model Transactions {
  id          String            @id @default(cuid())
  hash        String            @unique
  from        String
  to          String?
  value       String
  gasPrice    String
  gasUsed     String
  gasLimit    String
  blockNumber Int
  blockHash   String
  timestamp   DateTime
  status      TransactionStatus
  type        TransactionType
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@map("transactions")
  @@index([hash])
  @@index([from])
  @@index([to])
  @@index([timestamp])
  @@index([blockNumber])
  @@index([status])
  @@index([type])
}

// Alerts Table
model Alerts {
  id        String        @id @default(cuid())
  type      AlertType
  condition AlertCondition
  threshold Float
  message   String
  triggered Boolean       @default(false)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  userId    String?       // Optional: link to user when auth is implemented

  @@map("alerts")
  @@index([type])
  @@index([triggered])
  @@index([userId])
}

// Users Table (for future authentication)
model Users {
  id           String    @id @default(cuid())
  email        String    @unique
  passwordHash String
  name         String?
  isActive     Boolean   @default(true)
  lastLoginAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("users")
  @@index([email])
}

// User Sessions (for JWT tokens)
model UserSessions {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_sessions")
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
}

// System Health Logs
model SystemHealth {
  id             String   @id @default(cuid())
  service        String   // e.g., 'rpc', 'database', 'redis'
  status         String   // 'healthy', 'degraded', 'unhealthy'
  responseTime   Float?
  errorMessage   String?
  metadata       Json?
  timestamp      DateTime @default(now())

  @@map("system_health")
  @@index([service])
  @@index([status])
  @@index([timestamp])
}

// API Usage Logs (for rate limiting insights)
model ApiLogs {
  id         String   @id @default(cuid())
  endpoint   String
  method     String
  statusCode Int
  responseTime Float
  ipAddress  String
  userAgent  String?
  userId     String?
  timestamp  DateTime @default(now())

  @@map("api_logs")
  @@index([endpoint])
  @@index([method])
  @@index([statusCode])
  @@index([ipAddress])
  @@index([timestamp])
}

// Block Information (for detailed blockchain data)
model Blocks {
  id              String   @id @default(cuid())
  number          Int      @unique
  hash            String   @unique
  parentHash      String
  timestamp       DateTime
  gasUsed         String
  gasLimit        String
  transactionCount Int
  difficulty      String?
  totalDifficulty String?
  miner           String?
  size            Int?
  createdAt       DateTime @default(now())

  @@map("blocks")
  @@index([number])
  @@index([hash])
  @@index([timestamp])
}

// Cross-chain Comparison Data
model ChainComparisons {
  id            String   @id @default(cuid())
  chainName     String
  chainId       Int
  tps           Float
  blockTime     Float
  gasPrice      String
  networkHealth Float
  timestamp     DateTime
  createdAt     DateTime @default(now())

  @@map("chain_comparisons")
  @@index([chainName])
  @@index([chainId])
  @@index([timestamp])
}

// Enums
enum TransactionStatus {
  success
  failed  
  pending
}

enum TransactionType {
  transfer
  contract
  swap
  mint
  burn
  bridge
}

enum AlertType {
  tps
  gas_price
  block_time
  network_health
}

enum AlertCondition {
  above
  below
} 